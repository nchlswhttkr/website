---
- name: Ensure passwordstore is unlocked
  hosts: localhost
  gather_facts: false
  tasks:
      - name: Force GPG to prompt if not unlocked
        ansible.builtin.shell: echo | gpg --clearsign > /dev/null
        changed_when: false

- name: Create account for everyday use
  hosts: all
  gather_facts: false
  remote_user: root
  tasks:
      - name: Enable UFW
        community.general.ufw:
            rule: allow
            port: "{{ item }}"
            state: enabled
        with_items:
            - ssh
            - http
            - https
      - name: Create local user
        register: create_local_user
        ansible.builtin.user:
            name: "{{ item }}"
            shell: /bin/bash
        with_items:
            - nicholas
            - git
      - name: Give local user passwordless sudo # I apologise for this sin
        when: create_local_user.changed
        ansible.builtin.copy:
            dest: /etc/sudoers.d/nicholas
            content: |
                nicholas ALL=(ALL:ALL) NOPASSWD: ALL
            validate: visudo -cf %s
      - name: Set up SSH for local user
        when: create_local_user.changed
        ansible.builtin.copy:
            src: /root/.ssh/authorized_keys
            remote_src: true
            dest: /home/{{ item }}/.ssh/
            owner: "{{ item }}"
            group: "{{ item }}"
        with_items:
            - nicholas
            - git
      - name: Enable linger for local user
        when: create_local_user.changed
        ansible.builtin.shell: loginctl enable-linger nicholas
      - name: Create Ansible fact directory and Plausible directory
        when: create_local_user.changed
        ansible.builtin.file:
            path: "{{ item }}"
            state: directory
        with_items:
            - /etc/ansible/facts.d
            - /home/nicholas/plausible-hosting
      - name: Ensure facts files exist
        ansible.builtin.copy:
            content: "{}"
            dest: /etc/ansible/facts.d/{{ item }}.fact
            force: false
        with_items:
            - buildkite
            - ddns
            - docker
            - hugo
            - writefreely

- name: Install and configure dependencies
  hosts: all
  remote_user: nicholas
  tasks:
      #
      #
      # GENERAL
      - name: Install apt packages
        become: true
        ansible.builtin.apt:
            name:
                - nginx
                - fcgiwrap
                - jq
                - musl
                - shellcheck
                - build-essential
                - libgit2-dev
            state: latest
      - name: Keep apt packages up to date
        become: true
        ansible.builtin.apt:
            autoremove: true
            update_cache: true
            name: "*"
            state: latest

      #
      #
      # HUGO
      - name: Install Hugo
        when: ansible_local.hugo.hugo_version|d != hugo_version
        ansible.builtin.shell: |
            set -euo pipefail
            curl -L https://github.com/gohugoio/hugo/releases/download/v{{ hugo_version }}/hugo_{{ hugo_version }}_Linux-64bit.tar.gz \
              | tar -zx -C ~/ hugo
            sudo mv ~/hugo /usr/local/bin/hugo
            hugo version
            jq --null-input '.hugo_version = "{{ hugo_version }}"' | sudo tee /etc/ansible/facts.d/hugo.fact
        args:
            executable: /bin/bash

      #
      #
      # BUILDKITE
      - name: Install Buildkite agent
        register: install_buildkite
        when: ansible_local.buildkite.buildkite_version|d != buildkite_version
        ansible.builtin.shell: |
            set -euo pipefail
            mkdir -p ~/.buildkite-agent/hooks
            curl --silent --fail --location https://github.com/buildkite/agent/releases/download/v{{ buildkite_version }}/buildkite-agent-linux-amd64-{{ buildkite_version }}.tar.gz \
              | tar -zx -C ~/.buildkite-agent "./buildkite-agent"
            ~/.buildkite-agent/buildkite-agent --version
            jq --null-input '.buildkite_version = "{{ buildkite_version }}"' | sudo tee /etc/ansible/facts.d/buildkite.fact
        args:
            executable: /bin/bash
      - name: Configure Buildkite agent
        register: configure_buildkite
        no_log: true
        vars:
            buildkite_agent_token: "{{ lookup('community.general.passwordstore', 'website/buildkite-agent-token') }}"
            mailgun_api_key: "{{ lookup('community.general.passwordstore', 'website/mailgun-api-key') }}"
        ansible.builtin.template:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            mode: "{{ item.mode }}"
        with_items:
            - src: ../buildkite-agent/buildkite-agent.j2.cfg
              dest: /home/nicholas/.buildkite-agent/buildkite-agent.cfg
              mode: "0600"
            - src: ../buildkite-agent/environment.j2.sh
              dest: /home/nicholas/.buildkite-agent/hooks/environment
              mode: "0644"
            - src: ../buildkite-agent/buildkite-agent@.service
              dest: /home/nicholas/.config/systemd/user/
              mode: "0644"
      - name: Restart Buildkite agent service
        when: install_buildkite.changed or configure_buildkite.changed
        ansible.builtin.shell: |
            set -euo pipefail
            systemctl --user stop buildkite-agent@*
            systemctl --user daemon-reload
            systemctl --user start buildkite-agent@1
            systemctl --user enable buildkite-agent@1
        args:
            executable: /bin/bash

      #
      #
      # WEBSITE
      - name: Create website directory
        register: website_directory
        become: true
        ansible.builtin.file:
            path: /var/www/nicholas.cloud
            state: directory
            owner: nicholas
            group: nicholas
      - name: Sync public files
        ansible.posix.synchronize:
            src: ~/Google Drive/nicholas.cloud/public-files/
            dest: /home/nicholas/public-files/
            delete: true
      - name: Trigger build of website on Buildkite
        when: website_directory.changed
        vars:
            buildkite_api_token: "{{ lookup('community.general.passwordstore', 'website/buildkite-api-token') }}"
        ansible.builtin.uri:
            url: https://api.buildkite.com/v2/organizations/{{ buildkite_organization_slug }}/pipelines/{{ buildkite_pipeline_slug }}/builds
            method: POST
            headers:
                Authorization: Bearer {{ buildkite_api_token }}
            body_format: json
            body:
                commit: HEAD
                branch: main
            status_code: [201]
      - name: Wait for website build in Buildkite to finish
        when: website_directory.changed
        register: buildkite_result
        vars:
            buildkite_api_token: "{{ lookup('community.general.passwordstore', 'website/buildkite-api-token') }}"
        ansible.builtin.uri:
            url: https://api.buildkite.com/v2/organizations/{{ buildkite_organization_slug }}/pipelines/{{ buildkite_pipeline_slug }}/builds
            headers:
                Authorization: Bearer {{ buildkite_api_token }}
            body_format: json
            body:
                per_page: 1
                branch: main
        until: buildkite_result.json[0].state in ["passed", "failed"]
        failed_when: buildkite_result.json[0].state == "failed"
        retries: 5
        delay: 10

      #
      #
      # PLAUSIBLE
      - name: Install Docker
        register: install_docker
        when: ansible_local.docker.docker_version_release|d != docker_version_release or ansible_local.docker.containerd_version_release|d != containerd_version_release or ansible_local.docker.docker_compose_version|d != docker_compose_version
        ansible.builtin.shell: |
            set -euo pipefail
            curl --fail --silent \
                https://download.docker.com/linux/ubuntu/dists/{{ docker_ubuntu_release}}/pool/stable/amd64/containerd.io_{{ containerd_version_release }}_amd64.deb \
                > /tmp/containerd.deb
            curl --fail --silent \
                https://download.docker.com/linux/ubuntu/dists/{{ docker_ubuntu_release}}/pool/stable/amd64/docker-ce-cli_{{ docker_version_release }}_amd64.deb \
                > /tmp/docker-cli.deb
            curl --fail --silent \
                https://download.docker.com/linux/ubuntu/dists/{{ docker_ubuntu_release}}/pool/stable/amd64/docker-ce_{{ docker_version_release }}_amd64.deb \
                > /tmp/docker.deb
            sudo dpkg -i /tmp/containerd.deb
            sudo dpkg -i /tmp/docker-cli.deb
            sudo dpkg -i /tmp/docker.deb
            sudo docker run hello-world
            sudo curl -L "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            jq --null-input '
              .docker_version_release = "{{ docker_version_release }}" |
              .containerd_version_release = "{{ containerd_version_release }}" |
              .docker_compose_version = "{{ docker_compose_version }}"
            ' | sudo tee /etc/ansible/facts.d/docker.fact
        args:
            executable: /bin/bash
      - name: Ensure Plausible directory exists
        ansible.builtin.file:
            path: /home/nicholas/plausible-hosting
            owner: nicholas
            group: nicholas
            state: directory
      - name: Configure Plausible
        register: configure_plausible
        no_log: true
        vars:
            plausible_admin_password: "{{ lookup('community.general.passwordstore', 'website/plausible-admin-password') }}"
            plausible_secret_key: "{{ lookup('community.general.passwordstore', 'website/plausible-secret-key') }}"
            mailgun_relay_password: "{{ lookup('community.general.passwordstore', 'website/mailgun-relay-password') }}"
        ansible.builtin.template:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            mode: "{{ item.mode }}"
        with_items:
            - src: ../plausible/plausible-conf.j2.env
              dest: /home/nicholas/plausible-hosting/plausible-conf.env
              mode: "0600"
            - src: ../plausible/plausible-smtp-conf.j2.env
              dest: /home/nicholas/plausible-hosting/plausible-smtp-conf.env
              mode: "0600"
            - src: ../plausible/docker-compose.j2.yml
              dest: /home/nicholas/plausible-hosting/docker-compose.yml
              mode: "0644"
            - src: ../plausible/clickhouse-config.xml
              dest: /home/nicholas/plausible-hosting/
              mode: "0644"
            - src: ../plausible/clickhouse-user-config.xml
              dest: /home/nicholas/plausible-hosting/
              mode: "0644"
            - src: ../plausible/plausible.service
              dest: /home/nicholas/.config/systemd/user/
              mode: "0644"
      - name: Restart Plausible
        when: install_docker.changed or configure_plausible.changed
        ansible.builtin.shell: |
            set -euo pipefail
            systemctl --user stop plausible
            systemctl --user daemon-reload
            (cd plausible-hosting && sudo docker-compose pull)
            systemctl --user start plausible
            systemctl --user enable plausible
        args:
            executable: /bin/bash

      #
      #
      # GIT
      - name: Ensure Git directory exists
        become: true
        ansible.builtin.file:
            path: /var/www/git/
            owner: git
            group: git
            state: directory
      - name: List existing Git projects
        register: existing_git_projects
        ansible.builtin.shell: find /var/www/git -mindepth 1 -maxdepth 1 -name "*.git" | sed 's;/var/www/git/\(.*\).git;\1;'
        changed_when: false
      - name: Fetch list of repos to mirror from GitHub
        register: fetch_repos
        ansible.builtin.uri:
            url: https://api.github.com/search/repositories?q=user:nchlswhttkr+topic:nicholas-cloud
            body_format: json
            body:
                q: user:nchlswhttkr+topic:nicholas-cloud
            status_code: [200]
        changed_when: false
        failed_when: fetch_repos.failed or fetch_repos.json.incomplete_results # expects a complete search always
      - name: Ensure Git projects exist
        when: item.name not in existing_git_projects.stdout_lines
        remote_user: git
        no_log: true
        register: create_git_projects
        ansible.builtin.shell: |
            set -euo pipefail
            cd /var/www/git/
            git clone --bare https://github.com/nchlswhttkr/{{ item.name }}.git {{ item.name }}.git
            cd {{ item.name }}.git
            git remote remove origin
            touch git-daemon-export-ok
            echo 'Nicholas Whittaker' > owner
            echo '{{ item.description }}' > description
            echo 'https://nicholas.cloud/git/{{ item.name }}.git' > url
        args:
            executable: /bin/bash
        loop: "{{ fetch_repos.json['items'] }}"
      - name: Create post-receive hook for all local Git repos
        remote_user: git
        no_log: true
        ansible.builtin.template:
            src: ../git/post-receive.j2.sh
            dest: /var/www/git/{{ item.name }}.git/hooks/post-receive
            mode: "0755"
        loop: "{{ fetch_repos.json['items'] }}"
      - name: Check mandarin-duck version
        remote_user: git
        register: check_mandarin_duck_version
        ansible.builtin.shell: jq --raw-output '.version' .mandarin-duck/mandarin-duck.cfg
        ignore_errors: true
        changed_when: false
      - name: Install mandarin-duck
        when: check_mandarin_duck_version.stdout != mandarin_duck_version
        register: install_mandarin_duck
        remote_user: git
        vars:
            buildkite_api_token: "{{ lookup('community.general.passwordstore', 'website/buildkite-api-token') }}"
        ansible.builtin.shell: |
            set -euo pipefail
            [[ ! -d ~/mandarin-duck ]] && git clone --branch main https://github.com/nchlswhttkr/mandarin-duck.git ~/mandarin-duck
            cd ~/mandarin-duck
            git fetch
            git checkout v{{ mandarin_duck_version }}
            ./install.sh /var/www/git/mandarin-duck.git
            TEMP=$(mktemp)
            jq '
                .buildkite_organization_slug = "{{ buildkite_organization_slug }}" |
                .buildkite_api_token = "{{ buildkite_api_token }}" |
                .projects["/var/www/git/mandarin-duck.git"].buildkite_pipeline_slug = "mandarin-duck"
            ' ~/.mandarin-duck/mandarin-duck.cfg > $TEMP
            mv $TEMP ~/.mandarin-duck/mandarin-duck.cfg
        args:
            executable: /bin/bash
      - name: Sync checkout of stagit
        register: sync_stagit
        ansible.posix.synchronize:
            src: ../git/stagit/
            dest: /home/nicholas/stagit/
            delete: true
            checksum: true
            times: false
      - name: Sync stagit icon
        register: sync_stagit_icon
        remote_user: git
        ansible.builtin.copy:
            src: ../git/icon.png
            dest: /var/www/git/icon.png
      - name: Build and install stagit
        when: sync_stagit.changed or sync_stagit_icon.changed
        register: install_stagit
        ansible.builtin.shell: |
            set -euo pipefail
            cd ~/stagit
            make
            sudo make install
            make clean
            sudo cp style.css /var/www/git/
            sudo chown git:git /var/www/git/style.css
        args:
            executable: /bin/bash
      - name: Regenerate stagit index and projects
        when: install_stagit.changed or create_git_projects.changed
        remote_user: git
        ansible.builtin.shell: |
            set -euo pipefail
            find /var/www/git -mindepth 1 -maxdepth 1 -name "*.git" | cut -d '/' -f 5 | while read REPO; do
                mkdir -p "/var/www/git/${REPO%%.git}"
                cd "/var/www/git/${REPO%%.git}"
                stagit -u "https://nicholas.cloud/git/${REPO%%.git}/" "/var/www/git/$REPO"
            done
            stagit-index $(find /var/www/git -mindepth 1 -maxdepth 1 -name "*.git") > /var/www/git/index.html
        args:
            executable: /bin/bash

      #
      #
      # WRITEFREELY
      - name: Install Writefreely
        register: install_writefreely
        when: ansible_local.writefreely.writefreely_version|d != writefreely_version
        ansible.builtin.shell: |
            set -euo pipefail
            curl -L https://github.com/writefreely/writefreely/releases/download/v{{ writefreely_version }}/writefreely_{{ writefreely_version }}_linux_amd64.tar.gz \
              | tar -zx -C ~/ writefreely/
            jq --null-input '.writefreely_version = "{{ writefreely_version }}"' | sudo tee /etc/ansible/facts.d/writefreely.fact
        args:
            executable: /bin/bash
      - name: Configure Writefreely instance
        register: configure_writefreely
        no_log: true
        vars:
        ansible.builtin.template:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
        with_items:
            - src: ../writefreely/config.ini
              dest: /home/nicholas/writefreely/
            - src: ../writefreely/writefreely.service
              dest: /home/nicholas/.config/systemd/user/
      - name: Set up Writefreely instance
        when: install_writefreely.changed or configure_writefreely.changed
        vars:
            default_username: diary
            default_password: diary
        ansible.builtin.shell: |
            set -euo pipefail
            cd ~/writefreely
            if [ -f writefreely.db ]; then exit 0; fi
            ./writefreely db init
            ./writefreely user create --admin {{ default_username }}:{{ default_password }}
            ./writefreely keys generate
        args:
            executable: /bin/bash
      - name: Restart Writefreely instance
        when: install_writefreely.changed or configure_writefreely.changed
        ansible.builtin.shell: |
            set -euo pipefail
            systemctl --user stop writefreely
            systemctl --user daemon-reload
            systemctl --user start writefreely
            systemctl --user enable writefreely
        args:
            executable: /bin/bash

      #
      #
      # NGINX
      - name: Configure Nginx
        register: configure_nginx
        become: true
        ansible.builtin.copy:
            src: ../nicholas.cloud.nginx
            dest: /etc/nginx/sites-enabled/nicholas.cloud
            # can't validate here, do it later
      - name: Install Nginx certificates
        register: set_nginx_certificates
        no_log: true
        ansible.builtin.copy:
            content: "{{ item.content }}"
            dest: "{{ item.dest }}"
            mode: "0600"
        with_items:
            - content: "{{ lookup('community.general.passwordstore', 'website/nicholas.cloud.certificate returnall=true') }}"
              dest: /home/nicholas/nicholas.cloud.certificate
            - content: "{{ lookup('community.general.passwordstore', 'website/nicholas.cloud.key returnall=true') }}"
              dest: /home/nicholas/nicholas.cloud.key
      - name: Restart Nginx
        when: configure_nginx.changed or set_nginx_certificates.changed
        ansible.builtin.shell: |
            set -euo pipefail
            sudo nginx -t
            sudo systemctl restart nginx
        args:
            executable: /bin/bash

      #
      #
      # DDNS
      - name: Install DDNS
        when: ansible_local.ddns.ddns_version|d != ddns_version
        ansible.builtin.shell: |
            set -euo pipefail
            curl --silent --fail --location https://github.com/hugomd/cloudflare-ddns/releases/download/{{ ddns_version }}/cloudflare-ddns_{{ ddns_version }}_linux_amd64.tar.gz \
                | tar -zx -C ~/ "cloudflare-ddns"
            sudo mv ~/cloudflare-ddns /usr/local/bin/ddns
            jq --null-input '.ddns_version = "{{ ddns_version }}"' | sudo tee /etc/ansible/facts.d/ddns.fact
        args:
            executable: /bin/bash
      - name: Configure DDNS
        vars:
            cloudflare_zone_id: "{{ lookup('community.general.passwordstore', 'website/cloudflare-zone-id') }}"
            cloudflare_api_token: "{{ lookup('community.general.passwordstore', 'website/cloudflare-api-token') }}"
        register: configure_ddns
        no_log: true
        ansible.builtin.template:
            src: ../ddns.j2.cfg
            dest: /home/nicholas/ddns.cfg
            mode: "0600"
      - name: Run DDNS
        when: configure_ddns.changed or website_directory.changed
        ansible.builtin.shell: ddns -config /home/nicholas/ddns.cfg
